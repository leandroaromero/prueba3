{"version":3,"sources":["components/assets/14596.gif","components/Imagen.js","components/calculadora.js","components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Imagen","src","gif","alt","className","Calculadora","props","rendersuma","resultado","num1","state","num2","setState","ReactDOM","render","document","getElementById","input","e","campo","target","id","valor","parseInt","value","a","b","type","onChange","onClick","this","Component","Clock","seconds","Date","now","timerID","setInterval","tick","clearInterval","React","App","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,mC,4LCY5BC,G,MARA,WACX,OACI,yBAAKC,IAAKC,IAAKC,IAAI,wBAAwBC,UAAU,a,6CCmD9CC,E,kDApDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAYVC,WAAa,WACT,IAAIC,EACAC,EAAO,EAAKC,MAAMD,KAClBE,EAAO,EAAKD,MAAMC,KACtBH,EAAiBC,EAAKE,EACtB,EAAKC,SAAS,CAACJ,UAAUA,IAEzBK,IAASC,OAAT,qBAA8BN,GAAaO,SAASC,eAAe,eApBrD,EAuBlBC,MAAM,SAACC,GACH,IAAMC,EAAQD,EAAEE,OAAOC,GACjBC,EAAQC,SAASL,EAAEE,OAAOI,OAChC,EAAKZ,SAAL,eAAgBO,EAAOG,KAvBvB,EAAKZ,MAAQ,CACTD,KAAK,EACLE,KAAK,EACLH,UAAU,GANA,E,gDAUdiB,EAAEC,GACF,OAAOD,EAAEC,I,+BAqBJ,IAAD,OACJ,OACI,oCAEA,8BAEA,2BAAOtB,UAAU,QAAQuB,KAAK,OAAON,GAAG,OAAQO,SAAU,SAACV,GAAD,OAAK,EAAKD,MAAMC,MAC1E,6BACC,2BAAOd,UAAU,QAAQuB,KAAK,OAAON,GAAG,OAAQO,SAAU,SAACV,GAAD,OAAK,EAAKD,MAAMC,MAC1E,6BACA,2BAAOS,KAAK,SAASvB,UAAU,QAAQoB,MAAM,WAAWK,QAASC,KAAKvB,cAEvE,6BACC,yBAAKc,GAAG,mB,GA9CKU,aCDLC,E,kDACnB,aAAe,IAAD,8BACZ,gBAEKtB,MAAQ,CAACuB,QAASC,KAAKC,MAAQ,KAHxB,E,gEAMO,IAAD,OAClBL,KAAKM,QAAUC,aAAY,kBAAM,EAAKC,SAAQ,O,6CAI9CC,cAAcT,KAAKM,W,6BAInBN,KAAKlB,SAAS,CACZqB,QAASC,KAAKC,MAAQ,Q,+BAKxB,OACE,2BAAIL,KAAKpB,MAAMuB,QAAf,oD,GAvB6BO,IAAMT,WCmB1BU,MAhBf,WACE,OACE,yBAAKrC,UAAU,OACb,yBAAKA,UAAU,SACb,yDACA,qCAEF,kBAAC,EAAD,CAAQA,UAAU,eAClB,kBAAC,EAAD,MACA,6BACE,kBAAC,EAAD,SCJYsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNjC,IAASC,OACP,kBAAC,IAAMiC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,SD0HpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a59c8df0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/14596.c154a19f.gif\";","import React from 'react';\nimport gif from './assets/14596.gif'\nimport './assets/imagen.css'\n\nconst Imagen = () => {\n    return ( \n        <img src={gif} alt=\"Logo de la aplicacion\" className='imagen'></img>\n\n\n     );\n}\n \nexport default Imagen;","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom'\nimport {suma} from '../functions/suma'\nimport './assets/calculadora.css'\nclass Calculadora extends Component{\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            num1:0,\n            num2:0,\n            resultado:0\n    }\n    \n    }\n    sum(a,b){\n        return(a+b)\n    }\n    rendersuma = ()=>{\n        let resultado;\n        let num1 = this.state.num1\n        let num2 = this.state.num2\n        resultado = suma(num1,num2)\n        this.setState({resultado:resultado})\n\n        ReactDOM.render(`Resultado: ${resultado}`, document.getElementById('resultado'));\n    }\n\n    input=(e)=>{\n        const campo = e.target.id\n        const valor = parseInt(e.target.value)\n        this.setState({[campo]:valor})\n        \n        \n    \n}\n\n    render(){\n        return(\n            <div>\n            SUMA\n            <form>\n            \n            <input className=\"barra\" type=\"text\" id=\"num1\"  onChange={(e)=>this.input(e)}/>\n            <br/>\n             <input className=\"barra\" type=\"text\" id=\"num2\"  onChange={(e)=>this.input(e)}/>\n             <br/>\n             <input type=\"button\" className=\"boton\" value=\"Resolver\" onClick={this.rendersuma}/>\n            </form>\n            <br/>\n             <div id=\"resultado\"></div>\n\n            </div>\n        )\n    }\n}\n\nexport default Calculadora","\nimport React from 'react';\n\nexport default class Clock extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {seconds: Date.now() / 1000};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      seconds: Date.now() / 1000,\n    });\n  }\n\n  render() {\n    return (\n      <p>{this.state.seconds} seconds have ellapsed since the UNIX epoch.</p>\n    );\n  }\n}","import React from 'react';\n\nimport './App.css';\nimport Imagen from './components/Imagen'\nimport Calculadora from './components/calculadora'\nimport Clock from './components/Clock';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <h1>May the force be with you</h1>\n        <h3>Hola</h3>\n      </div>\n      <Imagen className=\"gif-centro\"/>\n      <Calculadora/>\n      <div>\n        <Clock/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}